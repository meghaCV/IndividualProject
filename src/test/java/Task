import Com.FirstAssignment.Task;
import org.junit.Test;
import java.time.DateTimeException;
import java.time.format.DateTimeParseException;
import static org.junit.Assert.*;
import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.assertEquals;


public class Task{

    Task task;
    String validTitle="Test Title";
    String validProject="Test Project";
    LocalDate validDueDate=LocalDate.parse("2020-12-28");


    @Test
    public void setUp() {
        try {
            task = new Task(validTitle, validProject, validDueDate);
        } catch (Exception e) {
            System.out.println("There are few errors in the testing of Task class");
            System.out.println("Following message could be helpful to identify the cause:");
            System.out.println(e.getMessage());

        }

    }


    @Test
    public void getTaskTitle() {
        assertEquals(validTitle,task.getTaskTitle());
    }





    @Test
    public void testValidProject() {
        assertEquals(validProject,task.getprojectName());

    }
    @Test

    public void testEmptyProject() {

        task.setProjectName("");

        assertEquals("",task.getprojectName());

    }

    @Test

    public void testvalidDueDate() {
        assertEquals(validDueDate,task.getDueDate());
    }

    @Test
    public void testIncorrectFormatDueDate() {
        boolean success=false;
        try {
            task.setDueDate(LocalDate.parse("2020-30-12"));
            fail("should have thrown a DateTimeParseException");
        } catch (DateTimeParseException e) {
            success = true;

        }
        assertEquals(true,success);

    }

    @Test
    public void testPastDueDate() {
        boolean success=false;
        try {
            task.setDueDate(LocalDate.parse("2014-08-16"));
            fail("should have thrown a DateTimeParseException");
        } catch (DateTimeException e) {
            success = true;

        }
        assertEquals(true,success);

    }

}





